shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp('~/Desktop/FYP_WEP_APP/ANN Predictor App')
runApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp('~/Desktop/FYP_WEP_APP/ANN Predictor App')
shiny::runApp()
?rel
?tags
runApp()
load(".RData")
load("~/Desktop/FYP_WEP_APP/ANN Predictor App/www/.RData")
row_select
rm(Result_USD_HETRO_LIST)
rn(Result_USD_HOMO_LIST_70)
rm(Result_USD_HOMO_LIST_70)
rm(Result_USD_HOMO_LIST_80)
rm(result_usd_PO3)
library("dplyr")
source("functions.R")
rm(data_set_7)
rm(data_set_8)
rm(currency)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- cbind(firstDay,secondDay,thirdDay)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
homo_model1 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]
row_select <- 1
homo_model1 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[1]]
homo_model2 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[2]]
homo_model3 <- Result_USD_HOMO_LIST[[row_select]][[5]][[6]][[3]]
usd_non_normalize <- data_set[[1]][[predictor_order - 2]][[6]]
value1 <-3.5
value2 <-4.5
value3 <-3.5
firstDay <- denormalized(value1,usd_non_normalize)
secondDay <- denormalized(value2,usd_non_normalize)
thirdDay <- denormalized(value3,usd_non_normalize)
firstDay
firstDay <- normalized(value1,usd_non_normalize)
secondDay <- normalized(value2,usd_non_normalize)
firstDay <- normalized(value1)
secondDay <- normalized(value2)
thirdDay <- normalized(value3)
test <- cbind(firstDay,secondDay,thirdDay)
test
value1 <-3.5
value2 <-4.5
value3 <-3.5
firstDay <- normalized(value1)
firstDay
value1
test <- cbind(value1,value2,value3)
test
normalized_test <-  (test-min(test))/(max(test)-min(test))
normalized_test
value1 <-3.5
value2 <-4.5
value3 <-3.1
test <- cbind(value1,value2,value3)
normalized_test <-  (test-min(test))/(max(test)-min(test))
normalized_test
test <- cbind(value1,value2,value3)
normalized_test <-  (test-min(test))/(max(test)-min(test))
model_results <- neuralnet::compute(homo_model1, normalized_test)
predicted_oneDayhead <- model_results$net.result
model_results2 <- neuralnet::compute(homo_model2, normalized_test)
predicted_oneDayhead2 <- model_results2$net.result
model_results3 <- neuralnet::compute(homo_model3, normalized_test)
predicted_oneDayhead3 <- model_results3$net.result
all_predicted <- cbind(predicted_oneDayhead,predicted_oneDayhead2,predicted_oneDayhead3)
all_predicted
result <- denormalized(all_predicted,test)
result
max(all_predicted)
max(result)
runApp()
#library(rsconnect)
#rsconnect::deployApp('~/Desktop/FYP_WEP_APP/ANN Predictor App')
library(rsconnect)
rsconnect::deployApp('~/Desktop/FYP_WEP_APP/ANN Predictor App')
install.packages("knitr")
